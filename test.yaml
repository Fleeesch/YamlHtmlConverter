---
# = = = = = = = = = = = = = = = = = = = = = = = = = = =
# - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Default Configuration
# - - - - - - - - - - - - - - - - - - - - - - - - - - -
# = = = = = = = = = = = = = = = = = = = = = = = = = = =

# DO NOT DELETE!!!
# INTEGRAL TO THE SOFTWARE

# ======================================================================================
#     TEMPLATES
# ======================================================================================

templates:
  #--
  # Hard coded templates required for default settings.
  # This section is extended with custom templates and shall not be overwritten.
  #--

  # ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~
  # Placeholder
  # ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~

  placeholder:
  #--
  # String entries that can be dynamically replaced in yaml
  # by using &PlaceholderName, as a literal placeholder for its value.
  #
  # Placeholders are applied before any mapping happens to the
  # raw text contents of a yaml.
  #--

  # ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~
  # Snippets
  # ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~

  snippet:
    #--
    # Snippets are pre-made dicts that can be inserted in a SFZ structure.
    # When calling a snippet via list, the first entries is the snippet name,
    # the following entries act as replacement arguments represented by an $[N] syntax.
    #
    # Snippets are loaded during the mapping process.
    #--

    Blank:
      This is a snippet: $1

  # ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~
  # Pattern
  # ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~

  pattern:
    # * * * * * * * * * * * * * * *
    # Level

    level: # level patterns
      pattern a: [ "1", "2" ]
      pattern b: [ "01", "02" ]

    # * * * * * * * * * * * * * * *
    # Tonal

    tonal:
      classic-h-sharp: [ c, c#, d, d#, e, f, f#, g, g#, a, a#, h ]
      classic-b-sharp: [ c, c#, d, d#, e, f, f#, g, g#, a, a#, b ]
      classic-h-b: [ c, db, d, eb, e, f, gb, g, ab, a, bb, h ]
      classic-b-b: [ c, db, d, eb, e, f, gb, g, ab, a, hb, b ]

# ======================================================================================
#     SFZ
# ======================================================================================

# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~
# SFZ File
# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~

sfz:
  #--
  # Global SFZ file information, shared accross all SFZ files created for an instrument.
  #--

  name: SFZ Instrument # part of the sfz filename

  # symbols for formatting
  symbols:
    #--
    # comment **[characters]**
    #--
    tab: ". . "
    line placeholder: "$l" # [string]
    comment line placeholder: "$c" # [string]
    comment:
      line: "- - - - - - - - - - - - - - - - - - - - -" # [string]
      subline: "* * * * * * * * * * * * * * * * *" # [string]
      large header:
        - "= = = = = = = = = = = = = = = = = = = = = = = = = =" # [string]
        - "- - - - - - - - - - - - - - - - - - - - - - - - - -" # [string]

# ======================================================================================
#     SFZ : [INSTRUMENT] : [LOOKUP ELEMENT]
# ======================================================================================

# Elements stored in the lookup section of an instrument.
# The data is shared with all elements of the instrument since they are sharing
# a single SFZ file that requires curves and other elements to be defined only once.

# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~
# Instrument Sections
# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~

instruments:
  #--
  # Every Instrument represents a single SFZ file that shares
  # its attributes with all containing elements.
  #
  # [!] Name of element:
  #     The name for the instrument architectual element
  #     is also used as the second part of the SFZ file.
  #     Using an instrument name that contains a "$" character
  #     will ignore this and instead use the direct name from "sfz: name"
  #
  # sfz: [h]
  #   instruments:
  #     [Instrument Name]:
  #       [lookup information]: <-- this section
  #       parts:
  #         [Part name]:
  #           [part data]:
  #           ...
  #--

  # :-:-:-:-:-:-:-:-:-:-:-:-:-:
  #   Attribute Information

  #--
  # copy: [h]
  #   Copies YAML data from another instrument or sequentially other parts if a list is given
  #--

  copy: # copies YAML data from instrument(s) ++ *[ins]* | **[ins, ins]**
  hide: false # refuse to write instrument to a SFZ file, but still collect it's data [bool]
  control:
  envelopes:
  curves:
  variables:
  release envelopes:
  filters:
  equalizers:
  lfo:
  keyswitches:
    default: # Default Keyswitch on load [string]
  velocity tracking: 0
  choke:

# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~
# Include
# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~

include:
  #--
  # include can be pre- or post-generated text
  #--

  pre: # string | [string, string]
  post: # string | [string, string]

# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~
# Insert Text
# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~

insert:
  #--
  # insert can be pre- or post-generated text
  #--

  pre: # *string* | **[string, string]**
  post: # *string* | **[string, string]**

# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~
# Control Section
# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~

# * * * * * * * * * * * * * * *
# Default Controls

control:
  # ::: Listed :::

  # Bend
  Bend:
    cc: 20
    default: 0

  # Velocity
  Velocity:
    cc: 131
    default: 0
    hide: true

  # Release Velocity
  Release Velocity:
    cc: 132
    default: 0
    hide: true

  # Channel Aftertouch
  Channel AT:
    cc: 129
    default: 0

  # [!] Integrating ARIA Interface CCs seems to break them

  # Volume
  Volume:
    cc: 7
  #  default: 127

  # Pan
  Pan:
    cc: 10
    default: 64

  # Send
  #Send:
  #  cc: 91
  #  default: 0

  # Pitchbend
  Pitchbend:
    cc: 128
    default: 0

  # ::: Unlisted (SFZ2) :::

  # Polyphonic Aftertouch
  Poly AT:
    cc: 130
    default: 0
    hide: True

  # Note Number
  Note:
    cc: 133
    hide: true

  # Gate (activated on Note press, can be used for legato modulation)
  Gate:
    cc: 134
    hide: true

  # Random Unipolar
  Random Unipolar:
    cc: 135
    hide: true

  # Random Bipolar
  Random Bipolar:
    cc: 136
    hide: true

  # Alternate
  Alternate:
    cc: 137
    hide: true

  # ::: Unlisted (ARIA) :::

  # Key Delta
  Keydelta:
    cc: 140
    hide: True

  # Key Delta (Absolute)
  Keydelta ABS:
    cc: 141
    hide: True

  # Host BPM
  Host BPM:
    cc: 142
    hide: True

  # Host Transport
  Host Transport:
    cc: 143
    hide: True

  # Host Samplerate
  Host Samplerate:
    cc: 144
    hide: True

  # Time Engine
  Time Engine:
    cc: 145
    hide: True

  # Time Signature A
  Timesig A:
    cc: 146
    hide: True

  # Time Signature B
  Timesig B:
    cc: 147
    hide: True

  # Quarter Note Position (Absolute)
  QN Position ABS:
    cc: 148
    hide: True

  # Quarter Note Position
  QN Position:
    cc: 149
    hide: True

  # Time since Instrument Creation
  Time Instrument:
    cc: 150
    hide: True

  # Time since Last Key has been pressed
  Time LastKeyOn:
    cc: 151
    hide: True

  # Time since Last Key has been released
  Time LastKeyOff:
    cc: 152
    hide: True

  # Count of Keys pressed
  Keycount:
    cc: 153
    hide: True

  # Count of active Voices
  Voicecount:
    cc: 154
    hide: True

  # Playahead offset of any sample
  Offset:
    cc: 155
    hide: True

# * * * * * * * * * * * * * * *
# Control Element

control element:
  cc: 0 #               cc number
  default: null #          default value (0 - 127)
  hide: false #         hide from ARIA control section
  show cc: true #      show cc index number

# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~
# Equalizers
# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~

# * * * * * * * * * * * * * * *
# Equalizers

equalizers:
  #--
  # embedded equalizers
  #--

  3Band: # name of equalizer
    dynamic: true
    bands:
      - [ 0, 1, 2 ]
      - [ 200, 20, 2 ]

# * * * * * * * * * * * * * * *
# Equalizers : Element

equalizer element:
  dynamic: false # dynamic recalculation of times during playback
  bands: # list of bands, max. 3 allowed [double, double, double]
  ## - [frequency, gain, bandwidth]
  ## - [frequency, gain, bandwidth]
  ## ...

# * * * * * * * * * * * * * * *
# Part : Equalizers : Element

part equalizer element:
  #--
  # Instrument Parts load already setup equalizers via lookup,
  # modulation of attributes can be applied only here
  #
  # equalizer: [h]
  #   [equalizer name]:
  #     modulation:
  #       ...
  #--

  modulation:
    band 1:
    band 2:
    band 3:

# * * * * * * * * * * * * * * *
# Band Modulation

equalizer band modulation:
  frequency:
    type:
    compensation:
    cc:
    lfo:
    variables:
    envelopes:
  bandwidth:
    type:
    compensation:
    cc:
    lfo:
    variables:
    envelopes:
  gain:
    type:
    compensation:
    cc:
    lfo:
    variables:
    envelopes:

# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~
# Filters
# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~

# * * * * * * * * * * * * * * *
# Filter Section

filters:
  Lowpass: # name of filter
    #--
    # attributes...
    #--

    type: lowpass
    poles: 2
    frequency: 100

# * * * * * * * * * * * * * * *
# Filter : Element

filter element:
  #--
  # available filter types:
  # lowpass, highpass, bandpass,
  # notch, allpass, comb, pink
  # low-shelf, high-shelf, eq
  #
  # available poles: [h]
  #     lowpass: 1,2,4,6
  #     highpass: 1,2,4,6 (1 seems to be ignored from ARIA)
  #     bandpass: 1,2
  #     allpass: 1
  #--

  type: lowpass # type of filter (see list) [string]
  poles: 1 # count of poles (varies between filters) [int]
  frequency: 9600 # frequency, seems to be maxed at 9600 [int]
  resonance: 0 # resonance [double]
  gain: 0 # gain on shelf and eq [double]
  key tracking: 0 # key tracking [int]
  key tracking center: 64
  velocity tracking: 0

# * * * * * * * * * * * * * * *
# Part : Filter : Element

part filter element:
  #--
  # filter element of part
  # used for modulating its attributes
  #
  # filters: [h]
  #   [filter name]:
  #     modulation:
  #       ...
  #--

  modulation:
    frequency:
      type:
      compensation:
      cc:
      lfo:
      variables:
      envelopes:
    resonance:
      type:
      compensation:
      cc:
      lfo:
      variables:
      envelopes:
    gain:
      type:
      compensation:
      cc:
      lfo:
      variables:
      envelopes:

# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~
# Release Envelopes
# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~

# * * * * * * * * * * * * * * *
# Envelopes

release envelopes:
  #--
  # Release Envelopes are triggered byn release samples
  #--

  Normal: # name of release envelope for lookup
    decay: # decay of envelope [double]
    points: # list of envelope points [double, double]
      - [ 0, 1 ]

  ##    - [time, depth]
  ##    - [time, depth]
  ##    - ....

# * * * * * * * * * * * * * * *
# Release Envelope Element

release envelope element:
  #--
  # Release Envelope for element, used like that:
  #
  # release envelope: [name of release envelope] [string]
  #--
  points:

# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~
# Modulation
# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~

# * * * * * * * * * * * * * * *
# Modulation Element

modulation element:
  #--
  # universal modulation element,
  # used for almost every standard Modulation
  #
  # Has a compensation factor that offsets the
  # source attribute value in order to achieve
  # a neutral value when modulation has its maximum value
  #
  # Example: [h]
  #   1. Default volume value is set to 1, giving you volume=1
  #   2. Volume can be modulated via CC1 with a depth of 10, giving you volume_oncc1=10
  #   3. Final output is...
  #       volume= -9
  #       volume_oncc1=10
  #
  #   When CC1 is set to its maximum value, volume is at its neutral value.
  #   Compensate can be used as a factor, a compensation of 0.5 would lead in this
  #   example to...
  #
  #       volume=-3.5
  #       volume_oncc1=10
  #
  #   Envelopes and LFOs: [h]
  #   Can use the direct values for modulation,
  #   but also have the "cc" section for individual
  #   modulator configurations
  #
  #--
  depth: 0 # depth of modulation [double]
  curve: # curve name used from lookup [string]
  compensate: 0 # compensate [double, pref. 0 - 1]
  smooth: 25
  step: 0
  modulation: # optionally nested modulation (LFOs, Envelopes)

# * * * * * * * * * * * * * * *
# Envelope Element

envelope element:
  #--
  # Envelope Section of an Attribute modulation
  # within a Part
  #--

  depth: 0
  modulation:

# * * * * * * * * * * * * * * *
# Modulation Envelope Element

modulation envelope element:
  points:

  #--
  # for modulating envelope points, declared in the
  # envelopes lookup section
  #
  # envelopes: [h]
  #   [name of envelope]:
  #     modulation:
  #       cc:
  #         [name of control]:
  #           points:
  #             - [time, level]
  #             - [time, level]
  #             [h] Alternatively....
  #             - [time, curve, level, curve]
  #             - [time, curve, level, curve]
  #             - ...
  #       variables:
  #       ...
  #
  # All modulation is [double]
  #--

# * * * * * * * * * * * * * * *
# Adsr Modulation Element

modulation adsr element:
  #--
  # unique modulation element,
  # right now there's no difference between an
  # ordinary modulation elemet
  #
  # [!]might be scrapped in the future
  #--
  depth: 0
  curve:
  compensate: 0
  smooth: 25
  step: 0

# * * * * * * * * * * * * * * *
# Adsr Modulation Element

modulation lfo element:
  depth: # depth of modulation [double]
  compensate: 0 # compensate [double, pref. 0 - 1]
  modulation: # indivdual CC modulation
    cc:

  #level: 0 #
  #cc: 0 # depth of modulation [double]
  #curve: # curve name used from lookup [string]
  #compensate: 0 # compensate [double, pref. 0 - 1]
  #smooth: 25
  #step: 0

# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~
# Pitchbend
# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~

pitchbend:
  #--
  # pitchbend settings for section
  #--
  range: 100 # range in cents [int] | [int, int] (up, down)
  step: 0 # step value (quantization) [int] | [int, int] (up, n)
  smooth: 25 # smoothing value [double]

# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~
# Variables
# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~

variable element:
  #--
  # variables lookup section,
  # stores control that modulate a variable, curves supported
  #
  # variables: [h]
  #   [variable name]:
  #     modulation:
  #       cc:
  #         [name of control]:
  #           depth:
  #           curve:
  #           smooth
  #         ...
  #--
  modulation:
    type:

# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~
# Amp EG
# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~

amp eg:
  #--
  # default amplitude EG values, used for
  # every amplitude implementation
  #
  # amp eg: [h]
  #   [amp eg attribute]:
  #     level:
  #     shape:
  #     modulation:
  #       cc:
  #         [Control]:
  #           depth:
  #       ....
  #--
  dynamic: false # dynamic recalcuation of time during playback
  delay:
    level: 0 # level of value
    modulation: # standard modulation section
      type:
      cc:
  attack:
    level: 0.005
    shape: 0
    modulation:
      type:
      cc:
  hold:
    level: 0
    modulation:
      type:
      cc:
  decay:
    level: 0.01
    shape: 0
    modulation:
      type:
      cc:
  sustain:
    level: 1
    modulation:
      type:
      cc:
  release:
    level: 0.01
    shape: 0
    modulation:
      type:
      cc:

# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~
# LFO
# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~

lfo:
  waveform: 0
  rate: 1
  phase: 0
  delay: 0
  fade: 0
  offset: 0
  smooth: 25

  sub:
    mix: 1
    list:
    ##  - [waveform, ratio, scale, offset]
    ##  - [waveform, ratio, scale, offset]
    ##  ...

  modulation:
    depth add:
      cc:
      compensation:
      lfo:
      envelopes:
    depth:
      cc:
      compensation:
      lfo:
      envelopes:
    waveform:
      type:
      compensation:
      cc:
      envelopes:
    rate:
      type:
      compensation:
      cc:
      lfo:
      envelopes:
    phase:
      type:
      compensation:
      cc:
      envelopes:
    delay:
      type:
      compensation:
      cc:
      envelopes:
    fade:
      type:
      compensation:
      cc:
      envelopes:
    smooth:
      type:
      compensation:
      cc:
      envelopes:
    offset:
      type:
      compensation:
      cc:
      envelopes:

# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~
# Envelopes
# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~

envelopes:
  #--
  # Envelope lookup definition
  #
  # Sustain point is automatically calculated
  # if no value is given
  #
  # The "curve" tag within the point map
  # can be used to apply a custom curve
  # to the envelope segment
  #--
  sustain: # sustain point [int]
  dynamic: false
  modulation:
    type:
    cc:
  points: # list of points [double,double,double]
  ##  - [time, level, curvature, curve]
  ##  - [time, level, curvature, curve]
  ##  - ....

# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~
# Curves
# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~

# Element in curve lookup

curve element:
  #--
  # If the exponent is defined the curve will be interpolated
  # for the defined section.
  # By picking a resolution value between 0 - 1 the amount of points
  # can be reduced.
  # Setting resolution to 0.5 will result in half the amount of points
  #--
  resolution: 1 # factor for point reduction [double]
  points: # list of points [double,double,double]
  steps: false # creates a stepped curve [boolean]
  ##  - [level, position, exponent]
  ##  - [level, position, exponent]
  ##  - ...

# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~
# Choke
# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~

choke:
  #--
  # Group Choke section of a part
  # Groups are created on the fly when a name is given
  # and used universally accross the instrument
  #
  # The creation of Choke Groups always leadds to phantom zones
  # that act as choke agents for samples. It's a hack that
  # allows authentic Choke Groups with crossfaded samples.
  #
  # Polymono:[h]
  # Bypasses the "group" and "off by" settings and creates
  # per note mono-groups
  #--

  polymono: false # polyphonic one-voice-per-key overrite [bool]
  group: # group belonging [string]
  off by: # group that chokes the element [string]
  hard off: false # use voice release [bool]
  time: # fadeout time [double]
  shape: # fadeout curve [double]

# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~
# Attributes
# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~

attributes:
  #--
  # default attribute element.
  # attributes are elements that carry a float point value which can be modulated
  #
  # -> see modulation element for more information
  #
  # all modulation elements merge / extend their data with
  # the data available from the modulation element
  #--

  # :-:-:-:-:-:-:-:-:-:-:-:-:-:
  #   Attribute Information

  #--
  # compensation [h]
  #   - sum: sum of all compensations
  #   - average: average of all compensation
  #--

  level: 0 # base level of attribute [double]
  modulation:
    compensation:
    type:
    lfo:
    ##   [lfo element]:
    ##     depth:
    ##     step:
    ##     smooth:
    cc:
    ##   [control element]:
    ##     depth:
    ##     smooth:
    ##     step:
    ##     curve:
    ##     ...
    envelopes:
    ##   [envelope element]:
    ##     depth:
    ##     ...
    variables:
    ##   [variable element]:
    ##     depth:
    ##     curve:
    ##     ...

# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~
# Range Element
# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~

range element:
  #--
  # Range Element cover the whole range by default
  #--
  low: 0 # low range [int]
  high: 127 # high range [int]

# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~
# Keyswitch Element
# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~

keyswitch element:
  #--
  # keyswitch element, used for triggering a
  # part via key section
  #--
  label: Keyswitch # label shown in the ARIA interface
  note: # single note or section [int] | [int, int]

# ======================================================================================
#     SFZ : [INSTRUMENT] : [PART]
# ======================================================================================

# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~
# Part Section
# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~

# :-:-:-:-:-:-:-:-:-:-:-:-:-:
#   Attribute Information

parts:
  #--
  # trigger: [h]
  #   normal - always trigger note
  #   release - trigger note on release (requires previous active voice on ARIA)
  #   first - trigger only if no voice is active
  #   second - legato trigger, activate if at least one voice is active
  #
  # playmode: [h]
  #   normal - straight playing of sample
  #   shot - one shot trigger, play full sample
  #   loop all - loop sample all the time if loop points are available
  #   loop - loop sample, but stop looping on release
  #
  # roundrobin: [h]
  #   sequence - play roundrobins in a linear sequence
  #   random - play roundrobins through randomization
  #   hybrid - split roundorbins into two sections that use randomized samples
  #   !!! hybrid seems to be broken, so avoid that one for now
  #
  # include: [h]
  #   Can be single items or lists.
  #   The content of a file can be inserted pre- or post automaticially generated sfz content
  #   of the current sfz structure element, see section for specific information
  #
  # insert: [h]
  #   Insert written text pre- or post the automatically generated sfz content.
  #   [!] References to the local SFZ structure element can be made using brackets:
  #   {envelopes:EnvelopeName}          ->  Envelope SFZ tag
  #   {curves:CurveName}                ->  Curve Index Number
  #   {filters:FilterName}              ->  Local Filter Index (nothing or "2")
  #   {lfo:LfoName}                     ->  LFO SFZ tag
  #   {control:ControlName}             ->  Control CC number
  #   {keyswitches:KeyswitchName}       ->  Low Keyswitch Range
  #   {keyswitches_high:KeyswitchName}  ->  High Keyswitch Range
  #
  # keyrange: [h]
  #   "force note" removes tonal mapping and instead moves all the samples to a given note,
  #   still respecting "extend" settings
  #
  # snippet: [h]
  #   Inserts a snippet from the template section.
  #   Can be a single word or a list, where the first entry is the snippet name and
  #   The following entries are values for placeholder wildcards defined in the snippets using $1, $2, ...
  #
  # copy: [h]
  #   Copies YAML data from another part or sequentially from other parts if a list is given
  #
  # force note: [h]
  #   Ignores tonal mapping and forces the note range of all samples to a specified note.
  #   Can be a list in order to force a range.
  #--

  ## Formatting [h]
  hide: false #             hide from printing, but keeping the structure

  ## Section Settings [h]
  zones: #                  zones settings          -> see section
  splits: #                 splits settings         -> see section
  samples: #                samples settings        -> see section
  sounds: #                 sound settings          -> see section
  choke: #                  choke group settings    -> see section

  ## text insertion tools [h]
  copy: #                   copy YAML data from part(s) [part] | [part, part, ...]
  snippet: #                link to a snippet form the template section [string] | [string, double/int/string, double/int/string, ...]
  include: #                include data from an external file (relative path) [file] | [file_1, file_2...]
  insert: #                 insert string, optionally in post position when using an array [string] | [string, string]

  ## Play Behaviour [h]
  trigger: Normal #         trigger type (normal, release, first, second)
  playmode: Normal #        play mode (normal, shot, loop all, loop)
  reverse: False #          reverse playback direction [boolean]

  ## Release Envelope [h]
  release envelope:

  ## MIDI context : Tonal [h]
  note shift: 0 #          internal note shift
  keyswitch: #              keyswitch name [keyswitch]
  keyrange: #               default keyrange, samples are limited by this range
    low: 0
    high: 127
    force note: #           forces sample keyrange to a note (range) [int] | [int, int]
    extend: #               extends notes range for non-tonal indexing and lowest and highest notes
      low: 0
      high: 0

  ## MIDI context : Control / Program [h]
  cc range: #               cc range defining sample availability [int] | [int, int]
  cc trigger: #             cc range used for triggering playback [int] | [int, int]
  program range: #          program change range defining sample availability [int] | [int, int]

  ## Round Robin [h]
  roundrobin: sequence #    roundrobin bevaiour for part [string]

  ## Ampltidue Envelope [h]
  amp eg: #                 amp eg definition [amp eg settings, amp eg element...]

  ## Audio Processors [h]
  filters: #                filters section [filter_a, filter_b]
  equalizer: #              single equalizer [equalizer]

  ## Pitchbend [h]
  pitchbend: #              pitchbend sections  -> see section

# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~
# Part : Zones
# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~

# Zones settings of a part

# :-:-:-:-:-:-:-:-:-:-:-:-:-:
#   Attribute Information

zones:
  #--
  # crossfade: type: [h]
  #   type can be
  #     - "linear" for linear cross
  #     - "power" for a steeper crossfade
  #--
  crossfade:
    depth: 0.0 # tonal crossfade [int] (0 -1)
    type: power # type of crossfade [string] (linear, power)

# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~
# Part : Splits
# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~

splits:
  #--
  # Splits settings of a part
  #
  # If a split contains crossfades that are controlled with something
  # else than velocity, the level range is ignored since proper CC crossfading across the full range
  # requires all samples of a note to be played at the same time
  #
  #--
  # :-:-:-:-:-:-:-:-:-:-:-:-:-:
  #   Attribute Information

  #--
  # curve: [h]
  #   Exponent that shift the splits aroung logarithmically.
  #   The shift also affects the (optionally) already implemented crossfades.
  #
  #     values 0 - 1: compressed high level splits and gives low level splits more room
  #     value 1: splits are spread linear
  #     values > 1: compressed low level splits and gives high level splits more room
  #
  # crossfade: control: type: [h]
  #   velocity - uses default velocity detection for crossfades
  #   aftertouch - uses channel aftertouch for crossfades
  #   cc - uses control change with given index for crossfades
  #   [control name] - uses a control from the lookup section for crossfades
  #
  # crossfade control: source: [h]
  #   0 - 127 - Control Change number of type is cc
  #   [Control] - Control name string for picking a control via lookup
  #
  # full level: [h]
  #   Set to true to ignore levels (keeping the crossfades)
  #--
  curve: 1.0 # curve for shifting spits logarithmically [double]
  full level:
  crossfade:
    depth: 1.0
    type: power # type of crossfade [string] (linear, power)
    control: # crossfade control settings
      type: velocity # type of crossfade control [string]
      source: 0 # control source [int] | [control]

# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~
# Part : Samples
# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~

samples:
  #--
  # Samples settings of a part
  #--

  # :-:-:-:-:-:-:-:-:-:-:-:-:-:
  #   Attribute Information

  #--
  #   include:  [h]
  #   Allows only samples to be mapped that are recognized by the filter.
  #   Wildcard "*" is allowed. Can be a list.
  #
  #   exclude:  [h]
  #   Skips samples that match the filter.
  #   Wildcard "*" is allowed. Can be a list.
  #
  #   pattern:  [h]
  #   List that represents the attributes that can be read from a file.
  #   The filename is split using the "split" symbol from the settings and
  #   then scanned using the given pattern to get the attributes.
  #
  #     name - name of the sample
  #     note - tonal data, should be single note
  #     level - level data, for level dynamic ordering
  #     roundrobin - roundrobin information, for explict roundrobin declaration
  #
  #     [!] Any attribute that isn't listed here will act as placeholder.
  #         This allows you to skip a segment.
  #
  #     [!] Pattern without a note attribute:
  #         Felies on the"incremental start" and "incremental step" settings
  #         in order to spread the samples automatically across the tonal range.
  #         A new zone is created everytime there is a change in the name,
  #         which is typical for drum or noise samples.
  #
  # mapping: type: [h]
  #   tonal - map the sample tonally
  #   atonal - map the sample atonally, using the note information given
  #
  # mapping: type: note: [h]
  #   step - semitone to increment between notes
  #   start - starting note for atonal mapping
  #
  # mapping: level: pattern: [h]
  #   list of strings used for sorting levels by word, not numbers.
  #   can be used for classical velocity notation ("mezzoforte", "pianissimo")
  #
  # mapping: note: detection: type: [h]
  #   direct - grab note directly from a given number
  #   list - use a lookup array from the templates files or a given list of note names
  #     [!] list must contain 12 note names as strings, representing the western musical scale
  #     [!] the octave is filtered from a number filtered from the file note name
  #--
  location: Samples # relative part for samples [string]
  include: "*" # include filter [string] | [string, string, ...]
  exclude: "" # exclude filter [string] | [string, string, ...]
  split: _ # split symbol for grabbing file attributes
  pattern: [ name, note, level, roundrobin ] # file attribute pattern [string, string, ...]
  mapping: # mapping settings
    type: tonal # mapping type [string]
    level:
      pattern: null # list for level lookup [string, string, string, ...]
      reverse: false
    note:
      incremental start: 36 # atonal starting note
      incremental step: 12 # atonal incrementation
      detection: # note detection settings
        type: list # type of note detection [string]
        pattern: classic-b-sharp # pattern used for array detection [string] | [list]

# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~
# Part : Sounds
# ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~

sounds:
  #--
  # Sounds settings of a part
  #--
  pitch tracking: 100 # default pitch tracking, set to 0 for completely atonal mapping
